context_parser: pypyr.parser.list
steps:
  - name: pypyr.steps.call
    comment: set default config & environment values.
    in:
      call: set_config
  - name: pypyr.steps.call
    comment: lint & test code. this runs on every pipeline invocation.
    in:
      call: 
        - lint
        - test
  - name: pypyr.steps.call
    comment: optionally do extras like package & publish after lint & test.
    run: '{argList}'
    in:
      call: '{argList}'

lint:
  - name: pypyr.steps.cmd
    comment: lint with flake8
    description: --> flake8 linting
    in:
      cmd: flake8

test:
  - name: pypyr.steps.cmd
    comment: test & coverage
    description: --> tests, output to terminal with line nos.
    skip: '{isCi}'
    in:
      cmd: pytest --cov={package_name} --cov-report term-missing:skip-covered {test_dir}
  - name: pypyr.steps.cmd
    comment: test & coverage but with file output
    description: --> tests, output to file
    run: '{isCi}'
    in:
      cmd: pytest --cov={package_name} --cov-report term-missing --cov-report {output_coverage} --junitxml={output_test_results} {test_dir}
  - name: pypyr.steps.cmd
    comment: coverage upload only works like this on CI. if you want to run local you need to give -t upload-token switch.
    description: --> upload coverage report output to codecov if CI.
    run: '{isCi}'
    in:
      cmd: codecov
  
package:
  - name: pypyr.steps.cmd
    comment: build wheel + sdist 
    description: --> build wheel + sdist to dist/
    in:
      cmd: flit build

publish:
  - name: pypyr.steps.call
    in:
      call: get_version
  - name: pypyr.steps.cmd
    description: --> publishing package to pypi
    comment: publish does a build/package itself, no need to call flit build separately.
    in:
      cmd: flit publish
  - name: pypyr.steps.cmd
    description: --> uninstall current version of package before attempting to reinstall from pypi
    in:
      cmd: pip uninstall -y {package_name}
  - name: pypyr.steps.contextcopy
    in:
      contextCopy:
        expected_version: version
  - name: pypyr.steps.cmd
    description: --> giving pypi 10s before testing release
    in:
      cmd: sleep 10
  - name: pypyr.steps.cmd
    description: --> installing just published release from pypi for smoke-test
    retry:
      max: 5
      sleep: 10
    in:
      cmd: pip install --upgrade --no-cache-dir {package_name}=={expected_version}
  - name: pypyr.steps.call
    in:
      call: get_version
  - name: pypyr.steps.assert
    description: --> checking published package version as expected
    in:
      assert:
        this: '{version}'
        equals: '{expected_version}'
  - name: pypyr.steps.cmd
    comment: at this point, tox contains the pip compiled pypyr, rather than the -e dev install.
             currently CI not smart enough to save changes to cache, but this could
             well change, so prevent future problems.
             When running locally failing to do this will lead to surprises of
             not running local verification against the actual latest local. 
    description: --> reset the tox cache.
    in:
      cmd: pip install -e .

get_version:
  - name: pypyr.steps.default
    comment: initialize isConfigSet only if it doesn't exist in context already
    in:
      defaults:
        isConfigSet: false
        is_version_module_loaded: False
  - name: pypyr.steps.call
    comment: set default config & environment values only if not already set.
    skip: '{isConfigSet}'
    in:
      call: set_config
  - name: pypyr.steps.py
    description: --> get version
    in:
      py: |
        import importlib
        version_module = importlib.import_module(version_module_name)
        if is_version_module_loaded:
          importlib.reload(version_module)

        version = f'{version_module.__version__}'
        is_version_module_loaded = True

        save('version', 'is_version_module_loaded')
  - name: pypyr.steps.echo
    in:
      echoMe: version is {version}

set_config:
  - pypyr.steps.python
  - name: pypyr.steps.default
    comment: set configuration parameters & vars used throughout pipeline.
    in:
      defaults:
        test_dir: tests
        output_results_dir: .test-results
        output_coverage: xml:{output_results_dir}/codecoverage/coverage.xml
        output_test_results: "{output_results_dir}/testresults/junitresults.xml"
        argList: null
  - pypyr.steps.configvars
  - name: pypyr.steps.assert
    description: --> check expected keys in pyproject.toml
    foreach:
      - package_name
      - version_module_name
    in:
      assert:
        this: !py i in locals()
  - name: pypyr.steps.envget
    comment: CI is true in a github action environment.
    in:
      envGet:
        env: CI
        key: isCi
        default: False
  - name: pypyr.steps.set
    comment: flag that config has been set.
    in:
      set:
        isConfigSet: True